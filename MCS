# Monte Carlo simulation of semiconductor market equities

# Add packages

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as dt
from pandas_datareader import data as pdr
import yfinance as yf

yf.pdr_override() # Override pandas_datareader's default behavior to use yfinance

# import data
def getData(stocks, start, end):
    stockData = pdr.get_data_yahoo(stocks, start=start, end=end)
    stockData = stockData['Close']
    returns = stockData.pct_change()
    meanReturns = returns.mean()
    covMatrix = returns.cov()
    return returns, meanReturns, covMatrix

def portfolioPerformance(weights, meanReturns, covMatrix, Time):
    returns = np.sum(meanReturns*weights)*Time
    std = np.sqrt( np.dot(weights.T, np.dot(covMatrix, weights)) ) * np.sqrt(Time)
    return returns, std

stocklist = ('NVDA','AVGO','AMD','INTC', 'QCOM','TXN','ADI','MU', 'ARM','NXPI','MRVL','MCHP','STM','ON','GFS','MPWR', 'UMC', 'SWKS', 'ASX','QRVO', 'LSCC', 'AMKR', 'RMBS', 'MTSI', 'ALGM', 'WOLF', 'POWI', 'SYNA',
    'CRUS', 'SLAB', 'DIOD', 'VSH', 'TSEM', 'FORM', 'SITM', 'SIMO', 'MXL',
    'NVTS', 'SMTC')
endDate = dt.datetime.now()
startDate = endDate - dt.timedelta(days=300)
returns, meanReturns, covMatrix = getData(stocklist, start=startDate, end=endDate)
returns = returns.dropna()


# Creating equal weights
weights_equal = np.array([1 / len(meanReturns)] * len(meanReturns))
print(weights_equal)



mc_sims = 400 # number of simulations
T = 100 #timeframe in days

meanM = np.full(shape=(T, len(weights_equal)), fill_value=meanReturns)
meanM = meanM.T

portfolio_sims = np.full(shape=(T, mc_sims), fill_value=0.0)

initialPortfolio = 10000



for m in range(0, mc_sims):
    # MC loops
    Z = np.random.normal(size=(T, len(weights_equal)))
    L = np.linalg.cholesky(covMatrix)
    dailyReturns = meanM + np.inner(L, Z)
    portfolio_sims[:,m] = np.cumprod(np.inner(weights_equal, dailyReturns.T)+1)*initialPortfolio

plt.plot(portfolio_sims)
plt.ylabel('Portfolio Value ($)')
plt.xlabel('Days')
plt.title('MC simulation of a stock portfolio')
plt.show()
